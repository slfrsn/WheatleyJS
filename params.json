{"name":"Wheatleyjs","tagline":"Valve's portals recreated in CSS and Javascript, bundled as a jQuery plugin","body":"# Wheatley.js\r\n\r\n**Portal gun, meet the web.** You're thinking: why on _Earth_ would you go through all the trouble of recreating Valve's portals and packaging it up in a jQuery plugin? Well... I... **\"Science isn't about _why_, it's about _why not_.\"** Yeah! What Cave Johnson said. Thanks, Cave! Alright, on to the good stuff...\r\n\r\n> **Disclaimer:** This is 110% for fun. It's a project I work on when I need to unwind. As such, browser testing is pretty lax and commits may be seldom. _However_, if you find an issue or have a contribution to make, I'll be all over that. Please don't hesitate to get involved.\r\n\r\n#### [LAUNCH THE DEMO!](https://wheatleyjs.github.io)\r\n\r\n## Usage\r\n\r\n1. Download and include the CSS and Javascript files...\r\n\r\n\t```html\r\n\t<link href=\"wheatley.min.css\" rel=\"stylesheet\">\r\n  <script src=\"wheatley.min.js\"></script>\r\n\t```\r\n\r\n\t**Note**: Wheatley requires jQuery (1.12.0 or newer). Make sure you include jQuery before Wheatley.\r\n\r\n2. Initialize Wheatley...\r\n\r\n\t```javascript\r\n\t$('#some-element').wheatley();\r\n\t```\r\n\r\n## Options\r\n\r\nOptions can be set during initialization...\r\n\r\n```javascript\r\n$('#some-element').wheatley({\r\n\tsize: 200, // Default: 200\r\n\tcontainer: '#some-container' // Default: 'body'\r\n});\r\n```\r\nThe following options are currently available. More will be added in the future as Wheatley matures.\r\n\r\n| Option        | Default | Description |\r\n| ------------- |:-------:| :-----------|\r\n| **size**      | 200     | Portal width (in pixels) |\r\n| **container** | 'body'  | Restrict movement of the crosshair to this element |\r\n\r\n## API\r\n\r\nTo interact with Wheatley you'll need to target its data on the element you attached it to. If you plan on doing this more than once, it's a good idea to assign a variable. For example...\r\n```javascript\r\nvar wheatley = $('#some-element').data('wheatley');\r\n```\r\nFor the sake of simplicity, we'll use that variable throughout the rest of this documentation.\r\n\r\n**Note:** for methods that accept callback arguments, you can use an anonymous function like the following and it will execute when the method is finished.\r\n\r\n```javascript\r\nwheatley.some.method(function(){\r\n\talert('Some method has finished!');\r\n});\r\n```\r\n\r\n#### General Methods\r\n\r\n- **Initialize:** initializes Wheatley and sets up the mouse click listeners\r\n - **callback** _Optional:_ Accepts a function to call when it's finished  \r\n\r\n```javascript\r\nwheatley.initialize();\r\n```\r\n\r\n- **Option:** Sets or returns an option\r\n - **key** _Required:_ Accepts any valid option as a string (e.g. ```size``` or ```container```)\r\n - **value** _Optional:_ Accepts a value to update the option with  \r\n\r\n```javascript\r\nwheatley.option('size'); // Returns 200, the default option for portal size\r\nwheatley.option('size', 400); // Updates the portal size to 400\r\n```\r\n\r\n- **Locate:** Returns the coordinates for all of the Wheatley components currently on the page. If an element doesn't exist on the page its value in the object will be null.  \r\n\r\n```javascript\r\nwheatley.locate(); // Returns the following object format...\r\n{\r\n\tblue:      { top: 555, left: 289, bottom: 815, right: 489 },\r\n\tcrosshair: { top: 237.75, left: -31.25 },\r\n\torange:    { top: 555, left: 671, bottom: 815, right: 871 },\r\n\tparent:    { top: 555, left: 289, bottom: 843, right: 1326 }\r\n}\r\n```\r\n\r\n- **Destroy:** Destroys the Wheatley instance and resets the changes it made to the DOM\r\n - **callback** _Optional:_ Accepts a function to call when it's finished  \r\n\r\n```javascript\r\nwheatley.destroy();\r\n```\r\n\r\n#### Portal Methods\r\n\r\n- **Create:** Create a portal of the specified colour at the specified coordinates  \r\n - **colour** _Required:_ Accepts ```'blue'``` or ```'orange'```\r\n - **coordinates** _Optional:_ Accepts an object of x, y values. These coordinates are relative to the element we've attached Wheatley to. Default is ```{ x: 0, y: 0 }```\r\n - **callback** _Optional:_ Accepts a function to call when it's finished  \r\n\r\n```javascript\r\nwheatley.portal.create('blue'); // Creates a blue portal at 0,0\r\nwheatley.portal.create('blue', {x: 10, y: 20}); // Creates a blue portal at 10,20\r\n```\r\n\r\n- **Destroy:** Destroys the portal  \r\n - **colour** _Required:_ Accepts ```'blue'``` or ```'orange'```\r\n - **callback** _Optional:_ Accepts a function to call when it's finished  \r\n\r\n```javascript\r\nwheatley.portal.destroy('orange'); // Destroys the orange portal\r\n```\r\n\r\n#### Crosshair Methods\r\n\r\n- **Initialize:** Initializes the crosshair and starts listening to mouse movement\r\n - **callback** _Optional:_ Accepts a function to call when it's finished  \r\n\r\n```javascript\r\nwheatley.crosshair.initialize();\r\n```\r\n\r\n- **Animate:** Triggers a CSS animation on the crosshair element\r\n - **animation** _Required:_ any CSS animation class name, default behaviour is to use ```'.misfire'```, the animation bundled with Wheatley.\r\n - **callback** _Optional:_ Accepts a function to call when the animation has finished  \r\n\r\n```javascript\r\nwheatley.crosshair.animate('misfire'); // Triggers the misfire animation\r\n```\r\n\r\n- **Destroy:** Destroys the crosshair\r\n - **callback** _Optional:_ Accepts a function to call when it's finished  \r\n\r\n```javascript\r\nwheatley.crosshair.destroy();\r\n```\r\n\r\n## Road Map\r\n\r\n- [ ] Add support for relevant browsers (e.g. the crosshair relies on ```pointer-events: none``` and IE 10 and under don't support it)\r\n- [ ] Add support for touch devices (1-point touch for blue portals, 2-point touch for orange)\r\n- [ ] Add the ability to \"throw\" objects into one portal and exit the opposite portal while maintaining kinetic motion\r\n\r\n## Contributing\r\n\r\nContributions are welcome! And encouraged! Help me check some of those road map items off my list, or submit an issue or pull request if you find a bug.\r\n\r\n## License\r\n\r\nCopyright Â© 2016 [slfrsn](https://github.com/slfrsn) - [The MIT License (MIT)](https://opensource.org/licenses/MIT)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}