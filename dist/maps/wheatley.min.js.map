{"version":3,"names":[],"mappings":"","sources":["wheatley.min.js"],"sourcesContent":["/*!\n * CSS Portals, v1.0a (http://github.com/scfrsn)\n * Copyright 2016 Stef Friesen (http://frsn.ca)\n * Licensed under the MIT license\n * Last Updated: 1/18/2016, 10:30:15 AM\n */\n\n(function($) {\n    $.wheatley = function(element, options) {\n      var plugin = this,\n        $element = $(element),\n            $gun = $('<div id=\"portal-gun\"></div>'),\n       $document = $(document),\n           $body = $('body'),\n    animationEnd = 'webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend';\n\n      var defaults = {\n        size      : 200,\n        animation : true,\n        quality   : 'high',\n        container : 'body'\n      };\n\n      plugin.settings = $.extend({}, defaults, options);\n\n      plugin.initialize = function() {\n        plugin.gun.initialize();\n        // Left click in the element to create a blue portal, right click for orange\n        $element.on('click contextmenu', function(e) {\n          if(e.type == 'click')       plugin.portal.create('blue',   { x : e.pageX, y : e.pageY });\n          if(e.type == 'contextmenu') plugin.portal.create('orange', { x : e.pageX, y : e.pageY });\n          return false;\n        });\n        // Left click on an existing portal to destroy, right click to destroy orange\n        $document.on('click contextmenu', '.portal div', function(e) {\n          var eventTarget = $(e.target).parent().attr('id').replace('-portal',''),\n                   target = e.type == 'click' ? 'blue' : 'orange';\n          if(eventTarget == target) {\n            plugin.portal.destroy(target);\n            plugin.gun.animate('fire');\n          } else {\n            plugin.gun.animate('misfire');\n          }\n          return false;\n        });\n      }\n\n      plugin.option = function(key, value) {\n        if (value !== undefined) {\n          plugin.settings[key] = value;\n        } else {\n          return plugin.settings[key];\n        }\n      }\n\n      // Calculates the bounding box of all of the plugin elements\n      plugin.positions = function() {\n        var portal = function(color) {\n          var $portal = $('#' + color + '-portal');\n          if($portal.length) {\n            return {\n              top      : $portal.offset().top,\n              left     : $portal.offset().left,\n              bottom   : $portal.offset().top + plugin.settings.size * 1.3,\n              right    : $portal.offset().left + plugin.settings.size,\n            };\n          }\n          return null;\n        }\n        var parent = {\n          top    : $element.offset().top,\n          left   : $element.offset().left,\n          bottom : $element.offset().top + $element.outerHeight(),\n          right  : $element.offset().left + $element.outerWidth()\n        };\n        return { parent : parent, blue : portal('blue'), orange : portal('orange') };\n      }\n\n      plugin.destroy = function(callback) {\n        plugin.gun.destroy();\n        plugin.portal.destroy('blue');\n        plugin.portal.destroy('orange');\n        $element.off('click contextmenu');\n        $document.off('click contextmenu', '.portal div');\n        $element.removeData();\n        if (callback && (typeof callback == \"function\")) callback();\n      }\n\n      plugin.portal = {\n        create: function(color, coordinates, callback) {\n            // The coordinates and callback arguments are both optional\n            // Make the sure the proper argument is being passed if others are missing\n            if (arguments.length == 1) {\n              coordinates = { x : 0, y : 0 };\n              callback = function() {};\n            } else if (arguments.length == 2) {\n              callback = function() {};\n              if (typeof coordinates == 'function') callback = coordinates;\n            }\n            var x = coordinates.x,\n                y = coordinates.y;\n            var animation = plugin.settings.animation == true ? 'spin' : '',\n                  quality = plugin.settings.quality == 'high' ? 'high-quality' : '',\n                 template = '<div id=\"' + color + '-portal\" class=\"portal appear ' + animation + ' ' + quality + '\">' +\n                              '<div class=\"darkest\"></div>' +\n                              '<div class=\"darker\"></div>' +\n                              '<div class=\"normal\"></div>' +\n                              '<div class=\"lighter\"></div>' +\n                              '<div class=\"lightest\"></div>' +\n                              '<div class=\"entrance\"></div>' +\n                            '</div>';\n            // Prevent the portals from spilling over the edges of the element\n            var newPortal = plugin.portal.calculate(x, y);\n            if (newPortal.left   < newPortal.parent.left  ) x = newPortal.parent.left   + newPortal.center.x;\n            if (newPortal.top    < newPortal.parent.top   ) y = newPortal.parent.top    + newPortal.center.y;\n            if (newPortal.right  > newPortal.parent.right ) x = newPortal.parent.right  - newPortal.center.x;\n            if (newPortal.bottom > newPortal.parent.bottom) y = newPortal.parent.bottom - newPortal.center.y;\n\n            // Prepare the updated coordinates and dimensions to apply to the new portal\n            var portalProperties = {\n              width  : plugin.settings.size + 'px',\n              height : plugin.settings.size + 'px',\n              top    : y - (plugin.settings.size / 2),\n              left   : x - (plugin.settings.size / 2)\n            }\n\n            var altPortal;\n            if(color == 'orange') altPortal = plugin.positions().blue;\n            if(color == 'blue') altPortal = plugin.positions().orange;\n            if (altPortal !== null &&\n                newPortal.right > altPortal.left &&\n                newPortal.left < altPortal.right &&\n                newPortal.top < altPortal.bottom &&\n                newPortal.bottom > altPortal.top) {\n              plugin.gun.animate('misfire');\n              console.log('Error: Portals cannot overlap.');\n            } else {\n              // If the portal already exists, move it\n        \t    var $oldPortal = $('#' + color + '-portal');\n            \tif($oldPortal.length) {\n          \t    var $newPortal = $oldPortal.clone(true);\n          \t    $oldPortal.removeClass('appear').addClass('disappear').before($newPortal).remove();\n          \t    $newPortal.css(portalProperties);\n          \t    // Clone the portal to restart the CSS animation\n              } else {\n          \t    $(template).appendTo('body').css(portalProperties);\n              }\n            }\n        \t\tplugin.gun.animate('fire');\n            if (callback && (typeof callback == \"function\")) callback();\n        },\n        // Calculates the bounding box, center position, and dimensions of a\n        // portal and its parent element at a given position.\n        calculate: function(x, y) {\n            var center = {\n              y : plugin.settings.size * 1.3 / 2, // Multiplier accounts for the scaleY() transform\n              x : plugin.settings.size / 2\n            };\n            var rect = {\n              top      : y - center.y,\n              left     : x - center.x,\n              bottom   : y + center.y,\n              right    : x + center.x,\n              center   : { y : center.y, x : center.x },\n              parent   : {\n                top    : $element.offset().top,\n                left   : $element.offset().left,\n                bottom : $element.offset().top + $element.outerHeight(),\n                right  : $element.offset().left + $element.outerWidth()\n              }\n            };\n            return rect;\n        },\n        destroy: function(color, callback) {\n        \t\t$('#' + color + '-portal').addClass('disappear').one(animationEnd, function() { $(this).remove(); });\n            if (callback && (typeof callback == \"function\")) callback();\n        }\n      }\n\n      plugin.gun = {\n        initialize: function(callback) {\n            // Only allow one instance of the portal gun\n            if ($gun.length) plugin.gun.destroy();\n            // Place the portal gun at the top of the container\n            var y = plugin.portal.calculate(0,0).parent.top,\n                x = plugin.portal.calculate(0,0).parent.left;\n            // Attach the portal gun to the DOM\n        \t\t$gun.appendTo('body').css({ top : y, left : x });\n          \t// Map the portal gun to the cursor\n          \t$document.on('mousemove', plugin.settings.container + ', .portal div', function(e) {\n        \t\t\t$body.addClass('portal-gun-active');\n              plugin.gun.position(e.pageX, e.pageY);\n          \t}).on('mouseout', plugin.settings.container, function(){\n              $body.removeClass('portal-gun-active');\n            });\n            if (callback && (typeof callback == \"function\")) callback();\n        },\n        // Position the portal gun over the cursor, accounting for the proper offset\n        position: function(x, y) {\n            $gun.css({\n              top:  y - ($gun.outerWidth() / 4),\n              left: x - ($gun.outerWidth() / 4)\n            });\n        },\n        // Accepts any CSS animation class (e.g. 'fire', 'misfire' or custom)\n        animate: function(animation, callback) {\n        \t\t$gun.addClass(animation).one(animationEnd, function() { $(this).removeClass(animation); });\n            if (callback && (typeof callback == \"function\")) callback();\n        },\n        destroy: function(callback) {\n            $document.off('mousemove', plugin.settings.container + ', .portal div').off('mouseout', plugin.settings.container);\n            $body.removeClass('portal-gun-active');\n            $gun.remove();\n            if (callback && (typeof callback == \"function\")) callback();\n        }\n      }\n      plugin.initialize();\n    }\n    $.fn.wheatley = function(options) {\n      return this.each(function() {\n        if (undefined == $(this).data('wheatley')) {\n          var plugin = new $.wheatley(this, options);\n          $(this).data('wheatley', plugin);\n        }\n      });\n    }\n})(jQuery);\n"],"file":"wheatley.min.js","sourceRoot":"/source/"}